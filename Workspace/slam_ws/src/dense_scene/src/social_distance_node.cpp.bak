#include <iostream>
//ros header
#include <ros/ros.h>
//pcl 
#include <pcl_ros/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/common/transforms.h>
#include <pcl/filters/voxel_grid.h>
#include <sensor_msgs/PointCloud2.h>
//opencv
#include <cv_bridge/cv_bridge.h>
#include <opencv2/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
//bbx msg
//#include "/robot/ws_robot/devel/include/darknet_ros_msgs/BoundingBoxes.h"
//#include "/robot/ws_robot/devel/include/darknet_ros_msgs/BoundingBoxe.h"
#include "darknet_ros_msgs/BoundingBoxes.h"
#include "darknet_ros_msgs/BoundingBox.h"
//multi msg process header
#include <message_filters/subscriber.h>
#include <message_filters/time_synchronizer.h>
#include <message_filters/sync_policies/approximate_time.h>
//std headers
#include <limits>
#include <algorithm>
#include <vector>
#include <cmath>
#include <string>

using namespace std;

typedef pcl::PointXYZRGB PointT;
typedef pcl::PointCloud<PointT> PointCloud;

static const std::string SDWINDOW = "Social Distance";

class socialDistance
{
public:
	socialDistance();
    
	void socialDistanceCb(const sensor_msgs::PointCloud2ConstPtr& ptcloud_msg, const sensor_msgs::ImageConstPtr& img_msg, const darknet_ros_msgs::BoundingBoxes::ConstPtr& bbx_msg);
    void socialDistanceDrawer();
	~socialDistance();
private:    
    ros::NodeHandle nh_;
    message_filters::Subscriber<sensor_msgs::PointCloud2> ptcloud_sub_;
    message_filters::Subscriber<sensor_msgs::Image> img_sub_;
	message_filters::Subscriber<darknet_ros_msgs::BoundingBoxes> bbx_sub_;
    
    typedef message_filters::sync_policies::ApproximateTime<sensor_msgs::PointCloud2, sensor_msgs::Image, darknet_ros_msgs::BoundingBoxes> sync_pol;
    message_filters::Synchronizer<sync_pol> sync;
    
    //parameters
    double minimum_probability_ = 0.5f;
    double minimum_thereshhold_ = 0.5f;

};

socialDistance::socialDistance():
ptcloud_sub_(nh_, "/camera/depth_registered/points", 10),
img_sub_(nh_, "/camera/rgb/image_raw", 10),
bbx_sub_(nh_, "/darknet_ros/bounding_boxes",10),
sync(sync_pol(10), ptcloud_sub_, img_sub_, bbx_sub_)
{
    nh_.param("minimum_probability", minimum_probability_, minimum_probability_);
    nh_.param("minimum_thereshhold", minimum_thereshhold_, minimum_thereshhold_);
    cv::namedWindow(SDWINDOW);
    sync.registerCallback(boost::bind(&socialDistance::socialDistanceCb,this,_1,_2,_3));
	cout << "Social Distance Initialization!" << endl;
};

socialDistance::~socialDistance()
{
    cv::destroyWindow(SDWINDOW);
	cout << "Exit" << endl;
};

void socialDistance::socialDistanceCb(const sensor_msgs::PointCloud2ConstPtr& ptcloud_msg, const sensor_msgs::ImageConstPtr& img_msg, const darknet_ros_msgs::BoundingBoxes::ConstPtr& bbx_msg )
{   
    //Image 
    cv_bridge::CvImagePtr cv_ptr;
    try
    {
      cv_ptr = cv_bridge::toCvCopy(img_msg, sensor_msgs::image_encodings::BGR8);
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }
    cv::imshow(SDWINDOW, cv_ptr->image);
    /*PointCloud::Ptr cloud;
    pcl::fromROSMsg(*ptcloud_msg, *cloud);
    auto bboxes = bbx_msg->bounding_boxes;
    std::vector<std::vector<float>> pt_drawer;
    for (auto bbx: bboxes)
    {

        if((bbx.probability < minimum_probability_) || (bbx.Class != "person"))
        {
            continue;
        }
        
        float c_x, c_y;
        c_x = (bbx.xmax + bbx.xmin)/2;
        c_y = (bbx.ymax + bbx.ymin)/2;
        
        int ptcloud_index = (c_y * cloud->width ) + c_x;
        PointT c_pt = cloud->at(ptcloud_index);
        if(std::isnan(c_pt.x))
            continue;
        float maxx, minx, maxy, miny, maxz, minz;
        
        maxx = maxy = maxz = -std::numeric_limits<float>::max();
        minx = miny = minz = std::numeric_limits<float>::max();
        
        for (int i = bbx.xmin; i < bbx.xmax; i++)
            for (int j = bbx.ymin; j < bbx.ymax; j++)
            {
                int index = (j * cloud->width) + i;
                PointT pt = cloud->at(index);
                
                if (std::isnan(pt.x))
                    continue;
                if (fabs(pt.x - c_x) > minimum_thereshhold_)
                    continue;
                maxx = std::max(pt.x, maxx);
                minx = std::min(pt.x, minx);
                maxy = std::max(pt.y, maxx);
                miny = std::min(pt.y, minx);
                maxz = std::max(pt.z, maxx);
                minz = std::min(pt.z, minx);
            }
        
        pt_drawer.push_back({c_x, c_y, (maxx + minx)/2, (maxy + miny)/2, (maxz + minz)/2});
        
    }
    std::sort(pt_drawer.begin(), pt_drawer.end());
    
    //draw lines and put texts
    for(int i = 0; i < pt_drawer.size()-2; i++)
    {
        cv::line(cv_ptr->image, cv::Point(pt_drawer[i][0], pt_drawer[i][1]), cv::Point(pt_drawer[i+1][0], pt_drawer[i+1][1]), cv::Scalar(0,0,0), 1);
    
        double distance = sqrt(pow(pt_drawer[i][2]-pt_drawer[i+1][2], 2) + pow(pt_drawer[i][3]-pt_drawer[i+1][3], 2) + pow(pt_drawer[i][4]-pt_drawer[i+1][4], 2));
        float mid_x = (pt_drawer[i][0]+pt_drawer[i+1][0])/2;
        float mid_y = (pt_drawer[i][1]+pt_drawer[i+1][1])/2;
        cv::putText(cv_ptr->image,to_string(distance), cv::Point(mid_x, mid_y), cv::FONT_HERSHEY_SIMPLEX, 1,cv::Scalar(0,0,0) );
    }*/
	
};


int main(int argc, char** argv)
{
   ros::init(argc, argv,"social_distance");
   cout << "Hello Automan!" << endl;
   socialDistance sd;
   ros::Rate rate(30);
   while( ros::ok() )
   {
       ros::spinOnce();
		rate.sleep();
       //cout<< "it is ok" << endl;
   }
    
   return 1;
};

